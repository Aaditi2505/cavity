# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhxjshi6lteLzfRC8Kqzq_glqjGsdFTJ
"""

# All-in-One Dental Cavity Detection App
# -----------------------------------------------------
import streamlit as st
import os
from datetime import datetime
from PIL import Image, ImageDraw, UnidentifiedImageError
import pandas as pd
import base64
import tempfile
import smtplib
from email.message import EmailMessage
import requests
from gtts import gTTS
import io
import zipfile
import sys
import streamlit as st
st.sidebar.info(f"‚úÖ Running on Python {sys.version}")

# ================= Page Setup =================
st.set_page_config(page_title="Dental Cavity App", layout="centered")

if "page" not in st.session_state:
    st.session_state.page = "login"
if "doctor_authenticated" not in st.session_state:
    st.session_state.doctor_authenticated = False

# ================= Page 1: Login =================
def page_login():
    st.title("ü¶∑ Welcome to the Dental Cavity Detection System")
    st.markdown("""<style>.big-font { font-size:200%; font-weight: bold; text-align: center; }</style>""", unsafe_allow_html=True)
    st.markdown("<p class='big-font'>Who are you?</p>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üë®‚Äç‚öïÔ∏è Doctor"):
            st.session_state.page = "doctor_login"
            st.rerun()
    with col2:
        if st.button("üßë‚Äç Patient"):
            st.session_state.page = "patient"
            st.rerun()

# ================= Doctor Login =================
def page_doctor_login():
    st.subheader("üîí Doctor Login")
    password = st.text_input("Enter Password", type="password")
    if st.button("Login"):
        if password == "admin123":
            st.session_state.doctor_authenticated = True
            st.session_state.page = "doctor"
            st.rerun()
        else:
            st.error("‚ùå Incorrect password")
    if st.button("‚¨ÖÔ∏è Back"):
        st.session_state.page = "login"
        st.rerun()

# ================= Page 2: Patient Upload =================
def page_patient_upload():
    st.title("üìù Patient Information & Upload")
    name = st.text_input("üë§ Name")
    contact = st.text_input("üì± Contact Number")
    lang = st.selectbox("üåê Choose Language", ["en", "ta", "hi"])
    st.session_state.language = lang

    image = st.file_uploader("üì§ Upload Dental X-ray", type=["jpg", "jpeg", "png"])
    if st.button("‚û°Ô∏è Submit and Diagnose") and name and contact and image:
        try:
            dt_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            filename_base = f"{name}_{dt_str.replace(':', '-').replace(' ', '_')}"

            os.makedirs("patient_images", exist_ok=True)
            image_path = os.path.join("patient_images", f"{filename_base}.jpg")
            with Image.open(image) as img:
                rgb_img = img.convert("RGB")
                rgb_img.save(image_path)

            os.makedirs("patient_records", exist_ok=True)
            with open(os.path.join("patient_records", f"{filename_base}.csv"), "w") as f:
                f.write("Name,Contact,Datetime,ImagePath,Diagnosis\n")
                f.write(f"{name},{contact},{dt_str},{image_path},Pending\n")

            st.session_state.patient_name = name
            st.session_state.image_path = image_path
            st.session_state.timestamp = dt_str
            st.session_state.page = "result"
            st.rerun()
        except UnidentifiedImageError:
            st.error("‚ùå The uploaded file is not a valid image. Please upload a valid JPG or PNG file.")
        except Exception as e:
            st.error(f"‚ùå Error processing image: {e}")

# ================= Page 3: Result =================
from streamlit_drawable_canvas import st_canvas

def page_result():
    st.title("üß™ Diagnosis Result")
    image_path = st.session_state.image_path
    name = st.session_state.patient_name
    timestamp = st.session_state.timestamp
    language = st.session_state.language

    MODEL_ID = "cavity-73rfa/3"
    API_KEY = "byOqF4HnykvCt2y074mI"
    API_URL = "https://detect.roboflow.com"
    EMAIL_SENDER = "kamarajengg.edu.in@gmail.com"
    EMAIL_PASSWORD = "vwvcwsfffbrvumzh"

    # Load image
    img = Image.open(image_path).convert("RGB")

    # Step 1: Get prediction from RoboFlow
    with open(image_path, "rb") as f:
        response = requests.post(f"{API_URL}/{MODEL_ID}?api_key={API_KEY}", files={"file": f})
    result = response.json()

    # Step 2: Extract predictions as initial box shapes
    cavity_found = False
    shapes = []
    for pred in result.get("predictions", []):
        if "cavity" in pred["class"].lower():
            cavity_found = True
        x, y, w, h = pred["x"], pred["y"], pred["width"], pred["height"]
        left = x - w / 2
        top = y - h / 2
        shapes.append({
            "type": "rect",
            "left": left,
            "top": top,
            "width": w,
            "height": h,
            "fill": "rgba(255, 0, 0, 0.3)",
            "stroke": "red",
            "name": "Cavity"
        })

    # Step 3: Show editable canvas
    st.subheader("üõ†Ô∏è Adjust or Duplicate Cavity Boxes Below")
    canvas_result = st_canvas(
        fill_color="rgba(255, 0, 0, 0.3)",
        stroke_color="red",
        stroke_width=3,
        background_image=img,
        update_streamlit=True,
        height=img.height,
        width=img.width,
        drawing_mode="rect",
        initial_drawing=shapes,
        key="editable_canvas"
    )

    # Step 4: Show editable box data
    if canvas_result.json_data:
        st.write("üì¶ Updated Boxes:")
        st.json(canvas_result.json_data)

    # Step 5: Display summary
    diagnosis = "Cavity Detected" if cavity_found else "No Cavity Detected"
    st.success(f"ü©∫ Initial AI Diagnosis: {diagnosis}")

    # Step 6: Generate audio message
    speak_text = {
        "ta": "‡Æï‡Æ±‡Øà‡Æï‡Æ≥‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ" if cavity_found else "‡Æ™‡Æ≤‡Øç‡Æ≤‡Æø‡Æ≤‡Øç ‡Æï‡Æ±‡Øà ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
        "hi": "‡§¶‡§æ‡§Å‡§§ ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§µ‡§ø‡§ü‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à" if cavity_found else "‡§ï‡•ã‡§à ‡§ï‡•à‡§µ‡§ø‡§ü‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§à ‡§ó‡§à",
    }.get(language, diagnosis)

    tts = gTTS(speak_text, lang=language)
    audio_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    tts.save(audio_file.name)
    audio_data = base64.b64encode(open(audio_file.name, 'rb').read()).decode()
    st.markdown(f"""
    <audio autoplay>
      <source src="data:audio/mp3;base64,{audio_data}" type="audio/mp3">
    </audio>
    """, unsafe_allow_html=True)

    # Step 7: Optional email
    email_to = st.text_input("üìß Send diagnosis via email (optional):")
    if st.button("Send Email") and email_to:
        try:
            msg = EmailMessage()
            msg['Subject'] = "Dental Cavity Diagnosis"
            msg['From'] = EMAIL_SENDER
            msg['To'] = email_to
            msg.set_content(f"Patient: {name}\nDiagnosis: {diagnosis}\nTime: {timestamp}")
            with open(image_path, 'rb') as f:
                msg.add_attachment(f.read(), maintype='image', subtype='jpeg', filename=os.path.basename(image_path))
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
                smtp.login(EMAIL_SENDER, EMAIL_PASSWORD)
                smtp.send_message(msg)
            st.success("‚úÖ Email sent!")
        except Exception as e:
            st.error(f"Email failed: {e}")


# ================= Main Dispatcher =================
if st.session_state.page == "login":
    page_login()
elif st.session_state.page == "doctor_login":
    page_doctor_login()
elif st.session_state.page == "patient":
    page_patient_upload()
elif st.session_state.page == "result":
    page_result()
elif st.session_state.page == "doctor":
    if st.session_state.doctor_authenticated:
        page_doctor()
    else:
        st.session_state.page = "doctor_login"
        st.rerun()
